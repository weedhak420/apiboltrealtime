version: '3.8'

services:
  # Bolt Tracker API
  bolt-tracker:
    build: .
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      - BOLT_SERVER_PORT=:8000
      - BOLT_DATABASE_HOST=mysql
      - BOLT_DATABASE_PORT=3306
      - BOLT_DATABASE_USER=root
      - BOLT_DATABASE_PASSWORD=password
      - BOLT_DATABASE_NAME=bolt_tracker
      - BOLT_REDIS_HOST=redis
      - BOLT_REDIS_PORT=6379
      - BOLT_REDIS_PASSWORD=
      - BOLT_REDIS_DB=0
      - BOLT_OBSERVABILITY_STRUCTURED_LOGGING=true
      - BOLT_OBSERVABILITY_LOG_FORMAT=json
      - BOLT_MONITORING_ENABLE_PROMETHEUS=true
      - BOLT_MONITORING_PROMETHEUS_PORT=:9090
      - BOLT_JWT_KEY_ROTATION_ENABLED=true
      - BOLT_JWT_REVOCATION_STORE=redis
      - BOLT_RATE_LIMITING_DISTRIBUTED=true
      - BOLT_RATE_LIMITING_STORAGE_BACKEND=redis
      - WATCH_CONFIG=true
    depends_on:
      - mysql
      - redis
      - jaeger
    volumes:
      - ./config.json:/app/config.json:ro
    networks:
      - bolt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=bolt_tracker
      - MYSQL_USER=bolt_user
      - MYSQL_PASSWORD=bolt_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bolt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bolt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - bolt-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - bolt-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - bolt-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx Load Balancer (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - bolt-network
    restart: unless-stopped
    depends_on:
      - bolt-tracker

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  bolt-network:
    driver: bridge
